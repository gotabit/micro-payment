{
  "contract_name": "contract",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "auto_release_time",
      "denom",
      "max_recipient"
    ],
    "properties": {
      "admin": {
        "type": [
          "string",
          "null"
        ]
      },
      "auto_release_time": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "denom": {
        "$ref": "#/definitions/Denom"
      },
      "max_recipient": {
        "type": "integer",
        "format": "uint32",
        "minimum": 0.0
      }
    },
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "Denom": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "native"
            ],
            "properties": {
              "native": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "cw20"
            ],
            "properties": {
              "cw20": {
                "$ref": "#/definitions/Addr"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "add_payment_chan"
        ],
        "properties": {
          "add_payment_chan": {
            "type": "object",
            "required": [
              "chan_key",
              "channels"
            ],
            "properties": {
              "chan_key": {
                "type": "string"
              },
              "channels": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Channel"
                }
              },
              "operator": {
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "close_payment_chan"
        ],
        "properties": {
          "close_payment_chan": {
            "type": "object",
            "required": [
              "chan_key",
              "channels"
            ],
            "properties": {
              "chan_key": {
                "type": "string"
              },
              "channels": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "integer",
                        "format": "uint8",
                        "minimum": 0.0
                      }
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "add_signer"
        ],
        "properties": {
          "add_signer": {
            "type": "object",
            "required": [
              "chan_key",
              "recipient_key",
              "signers"
            ],
            "properties": {
              "chan_key": {
                "type": "string"
              },
              "recipient_key": {
                "type": "string"
              },
              "signers": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "cashing"
        ],
        "properties": {
          "cashing": {
            "type": "object",
            "required": [
              "cheques",
              "recipient_key"
            ],
            "properties": {
              "cheques": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/PaymentCheque"
                }
              },
              "recipient_key": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Change the admin",
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "properties": {
              "auto_release_time": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "max_recipient": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "owner": {
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "description": "This accepts a properly-encoded ReceiveMsg from a cw20 contract",
        "type": "object",
        "required": [
          "receive"
        ],
        "properties": {
          "receive": {
            "$ref": "#/definitions/Cw20ReceiveMsg"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Channel": {
        "type": "object",
        "required": [
          "approve_signers",
          "key",
          "max_amount"
        ],
        "properties": {
          "approve_signers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "face_value": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint128",
            "minimum": 0.0
          },
          "key": {
            "type": "string"
          },
          "max_amount": {
            "type": "integer",
            "format": "uint128",
            "minimum": 0.0
          }
        }
      },
      "Cheque": {
        "type": "object",
        "required": [
          "chan_id",
          "recipient_key",
          "sender_key",
          "seq"
        ],
        "properties": {
          "chan_id": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "recipient_key": {
            "type": "string"
          },
          "sender_key": {
            "type": "string"
          },
          "seq": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "Cw20ReceiveMsg": {
        "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
        "type": "object",
        "required": [
          "amount",
          "msg",
          "sender"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "msg": {
            "$ref": "#/definitions/Binary"
          },
          "sender": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "PaymentCheque": {
        "type": "object",
        "required": [
          "cheque",
          "recipient_commitment",
          "sender_commitment"
        ],
        "properties": {
          "cheque": {
            "$ref": "#/definitions/Cheque"
          },
          "recipient_commitment": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          },
          "sender_commitment": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          },
          "value": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint128",
            "minimum": 0.0
          }
        }
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "payment_chan"
        ],
        "properties": {
          "payment_chan": {
            "type": "object",
            "required": [
              "sender_pubkey_hash"
            ],
            "properties": {
              "page": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "recipient_pubkey_hash": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "sender_pubkey_hash": {
                "type": "string"
              },
              "size": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object"
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "type": "object",
    "additionalProperties": false
  },
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "type": "object",
      "required": [
        "auto_release_time",
        "denom",
        "id",
        "max_recipient",
        "owner"
      ],
      "properties": {
        "auto_release_time": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "denom": {
          "$ref": "#/definitions/Denom"
        },
        "id": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "max_recipient": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "owner": {
          "$ref": "#/definitions/CanonicalAddr"
        }
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "CanonicalAddr": {
          "description": "A blockchain address in its binary form.\n\nThe specific implementation is up to the underlying chain and CosmWasm as well as contracts should not make assumptions on that data. In Ethereum for example, an `Addr` would contain a user visible address like 0x14d3cc818735723ab86eaf9502376e847a64ddad and the corresponding `CanonicalAddr` would store the 20 bytes 0x14, 0xD3, ..., 0xAD. In Cosmos, the bech32 format is used for `Addr`s and the `CanonicalAddr` holds the encoded bech32 data without the checksum. Typical sizes are 20 bytes for externally owned addresses and 32 bytes for module addresses (such as x/wasm contract addresses). That being said, a chain might decide to use any size other than 20 or 32 bytes.\n\nThe safe way to obtain a valid `CanonicalAddr` is using `Api::addr_canonicalize`. In addition to that there are many unsafe ways to convert any binary data into an instance. So the type should be treated as a marker to express the intended data type, not as a validity guarantee of any sort.",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        },
        "Denom": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "native"
              ],
              "properties": {
                "native": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "cw20"
              ],
              "properties": {
                "cw20": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          ]
        }
      }
    },
    "payment_chan": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Nullable_Array_of_Recipient",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/Recipient"
      },
      "definitions": {
        "Recipient": {
          "type": "object",
          "required": [
            "approve_signers",
            "id",
            "max_amount"
          ],
          "properties": {
            "approve_signers": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "auto_release": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "face_value": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint128",
              "minimum": 0.0
            },
            "id": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "max_amount": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            },
            "withdrawl_seq": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      }
    }
  }
}
